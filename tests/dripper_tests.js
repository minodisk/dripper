// Generated by CoffeeScript 1.6.3
(function() {
  var chai, codes, dripper, should, spawn;

  chai = require('chai');

  dripper = require('../lib/dripper');

  spawn = require('child_process').spawn;

  should = chai.should();

  codes = {
    'class': "###*\nclass\n###\nclass Foo\n\n  ###*\n  class property\n  ###\n  @a: 3\n\n  ###*\n  class function\n  ###\n  @add: (a, b) ->\n    new Foo a.value + b.value\n\n  ###*\n  prototype property\n  ###\n  a: 3\n\n  ###*\n  constructor\n  ###\n  constructor: (value = 0) ->\n\n  ###*\n  member function\n  ###\n  add: (value) ->\n    @value += value",
    'extended function': "$.fn.extend\n  ###*\n  extended function\n  ###\n  findBranch = (items...) -> @find items.join '>'",
    'extended object': "$ =\n  fn:\n    ###*\n    objective parameter\n    ###\n    a: 100\n\n    ###*\n    objective function\n    ###\n    findAndSelf: (selector) -> @find(selector).addBack().find selector"
  };

  describe('dripper', function() {
    it('should not parse normal comment out', function() {
      var code, docs;
      code = "# single-line comment\nabc # single-line comment\n### herecomment ###\nabc ### herecomment ###\n###\nmulti-line herecomment\n###\n###\nmulti-line herecomment\n###\nabc";
      docs = dripper.parse(code);
      return docs.should.be.length(0);
    });
    it('should parse plane variable', function() {
      var code, doc;
      code = "###*\nplane variable\n###\ndoublePi = Math.PI * 2";
      doc = dripper.parse(code)[0];
      doc.type.should.be.equal('variable');
      doc.description.should.be.equal('plane variable');
      return doc.name.should.be.equal('doublePi');
    });
    it('should parse plane function', function() {
      var code, doc;
      code = "###*\nplane function\n###\nadd = (a, b = 0) -> a + b";
      doc = dripper.parse(code)[0];
      doc.type.should.be.equal('function');
      doc.description.should.be.equal('plane function');
      doc.name.should.be.equal('add');
      doc.params.should.have.length(2);
      doc.params[0].name.should.be.equal('a');
      should.not.exist(doc.params[0].value);
      doc.params[1].name.should.be.equal('b');
      return doc.params[1].value.should.be.equal(0);
    });
    it('should parse dotted variable', function() {
      var code, doc;
      code = "###*\ndotted variable\n###\n$.$window = $ window";
      doc = dripper.parse(code)[0];
      console.log(doc);
      doc.type.should.be.equal('variable');
      doc.description.should.be.equal('dotted variable');
      return doc.name.should.be.equal('$.$window');
    });
    return it('should parse dotted function', function() {
      var code, doc;
      code = "###*\ndotted function\n###\n$.fn.findAt = (selector, index = 0) -> @find(selector).eq(index)";
      doc = dripper.parse(code)[0];
      console.log(doc);
      doc.type.should.be.equal('function');
      doc.description.should.be.equal('dotted function');
      return doc.name.should.be.equal('$.fn.findAt');
    });
  });

}).call(this);
